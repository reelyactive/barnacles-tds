#!/usr/bin/env node

// setup barnacles-tds
const BarnaclesTDS = require('../lib/barnaclestds.js');
const Raddec = require('raddec');

const BARNACLES_TDS_OPTIONS = {
  printErrors: true,
  config: {
    server: process.env.TDS_SERVER || '127.0.0.1',
    authentication: {
      type: 'default',
      options: {
        userName: process.env.TDS_USER || 'admin',
        password: process.env.TDS_PASSWORD || 'admin',
      },
    },
    options: {
      database: process.env.TDS_DATABASE || 'reelyactive',
      trustServerCertificate: true,
    },
  },
  eventsToStore: {
    dynamb: {
    },
    raddec: {
      includePackets: false,
      filters: {
        acceptedEvents: [Raddec.events.APPEARANCE, Raddec.events.DISPLACEMENT, Raddec.events.DISAPPEARANCE]
      }
    }
  }  
};

let printErrors = false

let barnaclesTDS = new BarnaclesTDS(BARNACLES_TDS_OPTIONS);

const NUMBER_OF_DYNAMB_EVENTS = process.env.NUMBER_OF_DYNAMB_EVENTS || 1;
const NUMBER_OF_RADDEC_EVENTS = process.env.NUMBER_OF_RADDEC_EVENTS || 1;
const INTERVAL_MILLISECONDS = process.env.INTERVAL_MILLISECONDS || 5000;

let batchNumber = 0;

let generateEvents = () => {
  batchNumber++;
  generateRaddec();
  generateDynamb();
}

console.info(
  'barnacles-tds with simulated data every',
  INTERVAL_MILLISECONDS,
  'ms'
);

/**
 * Generate a random dynamb event and send it to a barnacles module
 */
let generateDynamb = () => {
  printErrors && console.log('Sending out', NUMBER_OF_DYNAMB_EVENTS, 'dynamb events');  
  for (let i = 0; i < NUMBER_OF_DYNAMB_EVENTS; i++) {
    const deviceNumber = i;
    barnaclesTDS.handleEvent('dynamb', randomDynamb(batchNumber, deviceNumber));
  }
}

/**
 * Generate a random raddec event and send it to a barnacles module
 */
function generateRaddec() {
  printErrors && console.log('Sending out', NUMBER_OF_RADDEC_EVENTS, 'raddec events');
  for (let i = 0; i < NUMBER_OF_RADDEC_EVENTS; i++) {
    const raddecDeviceNumber = i;
    barnaclesTDS.handleEvent('raddec', randomRaddec(batchNumber, raddecDeviceNumber));
  }
}

let randomDynamb = (batchNumber, deviceNumber) => {
  return {
    deviceId: 'ff690000' + [deviceNumber.toString(16).padStart(4, "0")],
    deviceIdType: 3,
    isContactDetected: [Math.random() < 0.1 ? false : true],
    isMotionDetected: [Math.random() < 0.1 ? true : false],
    numberOfOccupants: batchNumber,
    timestamp: Date.now(),
  };
}

let randomRaddec = (batchNumber, raddecDeviceNumber) => {
  return new Raddec({
    transmitterId: 'ff690000' + [raddecDeviceNumber.toString(16).padStart(4, "0")],
    transmitterIdType: Math.floor(Math.random()*8),
    rssiSignature: [{
        receiverId: "001bc50940810000",
        receiverIdType: Math.floor(Math.random()*8),
        rssi: Math.floor(Math.random() * ((-20) - (-75) + 1) + (-75)),
        numberOfDecodings: batchNumber
    }],
    events: [ Math.floor(Math.random()*6) ],
    packets: [ ],
    timestamp: Date.now()
  })
}

setInterval(generateEvents, INTERVAL_MILLISECONDS);
